---
description: 
globs: 
alwaysApply: false
---
# **Gitコミットメッセージルール**

このルールは、プロジェクトの変更履歴を明確かつ一貫して管理するためのもの。**すべてのコミットメッセージは日本語で書くこと**。

## **1. 基本構成**

コミットメッセージは次の3つのパートで構成する。

1. **Title (タイトル)**
    - コミット内容の概要を1行で表す。
    - フォーマットは以下の通り：

```
<タイプ>(<スコープ>): <概要>
```

1. 
    - **<タイプ>**: 変更の種類を示す。以下のいずれかを使う。
        - **feat**: 新機能の追加
        - **fix**: バグ修正
        - **docs**: ドキュメントの変更のみ
        - **style**: 書式やコメントなど、動作に影響しない変更
        - **refactor**: 内部コードの整理（機能追加やバグ修正なし）
        - **test**: テストの追加・修正
        - **chore**: その他（ビルドツールの設定変更や補助スクリプトの修正など）
    - **<スコープ>**: *(任意)* 対象のモジュールや機能、コンポーネントなどを**英語で**記述
    - **<概要>**: 変更内容を簡潔に命令形で記述（例：「追加」「修正」「削除」など）。原則50文字前後に収め、詳細は本文に記載する。
2. **Body (本文)**
    - タイトルとの間に**空行**を入れる。
    - 変更の背景・理由・詳細・影響範囲・注意点などを書く。
    - 各行は**72文字前後で改行**するなど、読みやすさを意識する。
    - 箇条書きで記述すると読みやすい。
3. **Footer (フッター)**
    - 任意。関連するIssue番号やタスク番号、「BREAKING CHANGE」の詳細などを記載する。
    - 複数のIssueがある場合は、見やすく列挙する。

## **2. 記述上の注意点**

- **日本語で統一**
    
    チーム内での認識のズレを防ぐため、日本語で書くこと。
    
- **命令形で書く**
    
    タイトルは「追加する」ではなく「追加」のように命令形で簡潔に。
    
- **行の長さに配慮**
    
    タイトルは1行で、本文は72文字程度で改行。
    
- **各パートを明確に分ける**
    
    タイトル・本文・フッターの間には空行を入れるなどして区切る。
    

## **3. 具体例**

- **新機能追加**

```
feat(auth): ログイン機能を追加

- ユーザーがメールアドレスとパスワードでログインできるようにした
- フォーム入力時にバリデーションチェックを追加
- ログイン失敗時にエラーメッセージを表示
- UIのフィードバックを改善

関連: #123
```

- **バグ修正**

```
fix(user): ユーザー削除時の不具合を修正

- 関連データが正しく削除されない問題を修正
- 削除処理の順序を見直して依存関係の整合性を確保
- 再発防止のためにユニットテストを追加

関連: #456, #789
```

- **ドキュメント更新**

```
docs(README): インストール手順を更新

- セットアップ方法の最新情報をREADMEに反映
- 古い手順や不要な説明を削除
- コマンド例を最新のものに修正
```



